<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="sqlmap_fm_order_cost_detail">
  <resultMap id="costDetailMap" type="net.chetong.order.model.FmOrderCostDetailVO" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="order_id" property="orderId" jdbcType="BIGINT" />
    <result column="order_cost_id" property="orderCostId" jdbcType="BIGINT" />
    <result column="cost_name" property="costName" jdbcType="VARCHAR" />
    <result column="cost_type" property="costType" jdbcType="VARCHAR" />
    <result column="cost_money" property="costMoney" jdbcType="DECIMAL" />
    <result column="explains" property="explains" jdbcType="VARCHAR" />
    <result column="ext1" property="ext1" jdbcType="VARCHAR" />
    <result column="ext2" property="ext2" jdbcType="VARCHAR" />
    <result column="ext3" property="ext3" jdbcType="VARCHAR" />
  </resultMap>
  
  <sql id="Base_Column_List" >
    id, order_id, order_cost_id, cost_name, cost_type, cost_money, explains, ext1, ext2, 
    ext3
  </sql>
  
  <select id="queryFmOrderCostDetail" parameterType="net.chetong.order.model.FmOrderCostDetailVO" resultMap ="costDetailMap" >
		SELECT 
			<include refid="Base_Column_List"/>
		FROM fm_order_cost_detail 
		 <where>
		    <if test="id!= null">
                  and id=#{id}
            </if>
		    <if test="orderId!= null">
                  and order_id=#{orderId}
            </if>
		    <if test="orderCostId!= null">
                  and order_cost_id=#{orderCostId}
            </if>
		    <if test="costName!= null">
                  and cost_name=#{costName}
            </if>
		    <if test="costType!= null">
                  and cost_type=#{costType}
            </if>
		    <if test="costMoney!= null">
                  and cost_money=#{costMoney}
            </if>
		    <if test="explains!= null">
                  and explains=#{explains}
            </if>
		    <if test="ext1!= null">
                  and ext1=#{ext1}
            </if>
		    <if test="ext2!= null">
                  and ext2=#{ext2}
            </if>
		    <if test="ext3!= null">
                  and ext3=#{ext3}
            </if>
  		</where>
	</select>
	
	
	<insert id="insertNotNull" parameterType="net.chetong.order.model.FmOrderCostDetailVO" useGeneratedKeys="true" keyProperty="id">
			INSERT INTO fm_order_cost_detail   
			(
				<trim suffix="" suffixOverrides=",">
					<if test="id!= null">
		                   id,
		            </if>
					<if test="orderId!= null">
		                   order_id,
		            </if>
					<if test="orderCostId!= null">
		                   order_cost_id,
		            </if>
					<if test="costName!= null">
		                   cost_name,
		            </if>
					<if test="costType!= null">
		                   cost_type,
		            </if>
					<if test="costMoney!= null">
		                   cost_money,
		            </if>
					<if test="explains!= null">
		                   explains,
		            </if>
					<if test="ext1!= null">
		                   ext1,
		            </if>
					<if test="ext2!= null">
		                   ext2,
		            </if>
					<if test="ext3!= null">
		                   ext3,
		            </if>
	            </trim>
			)
			VALUES
	   		(
	   			<trim suffix="" suffixOverrides=",">
		   			<if test="id!= null">
		   			#{id},
		   			</if>
		   			<if test="orderId!= null">
		   			#{orderId},
		   			</if>
		   			<if test="orderCostId!= null">
		   			#{orderCostId},
		   			</if>
		   			<if test="costName!= null">
		   			#{costName},
		   			</if>
		   			<if test="costType!= null">
		   			#{costType},
		   			</if>
		   			<if test="costMoney!= null">
		   			#{costMoney},
		   			</if>
		   			<if test="explains!= null">
		   			#{explains},
		   			</if>
		   			<if test="ext1!= null">
		   			#{ext1},
		   			</if>
		   			<if test="ext2!= null">
		   			#{ext2},
		   			</if>
		   			<if test="ext3!= null">
		   			#{ext3},
		   			</if>
	   			</trim>
			)
		</insert>
		
	<update id="updateByKeyNotNull">
		UPDATE fm_order_cost_detail 
		  <trim prefix="SET" suffixOverrides=",">  
					<if test="orderId!= null">
		   			order_id = #{orderId},
		   			</if>  
					<if test="orderCostId!= null">
		   			order_cost_id = #{orderCostId},
		   			</if>  
					<if test="costName!= null">
		   			cost_name = #{costName},
		   			</if>  
					<if test="costType!= null">
		   			cost_type = #{costType},
		   			</if>  
					<if test="costMoney!= null">
		   			cost_money = #{costMoney},
		   			</if>  
					<if test="explains!= null">
		   			explains = #{explains},
		   			</if>  
					<if test="ext1!= null">
		   			ext1 = #{ext1},
		   			</if>  
					<if test="ext2!= null">
		   			ext2 = #{ext2},
		   			</if>  
					<if test="ext3!= null">
		   			ext3 = #{ext3},
		   			</if>  
		  </trim>
		  <where>	   
				    and id = #{id}
		 </where>
	</update>
	
	
	<delete id="deleteByKey">
		DELETE FROM 
			fm_order_cost_detail 
		<where>		   
		    	 and id = #{id}
		</where>
	</delete>
	
	<select id="queryCostMoney" parameterType="map" resultType="map">
		SELECT d.order_id , 
		MAX(CASE d.cost_type WHEN '1' THEN d.cost_money ELSE 0 END) AS baseMoney,
		MAX(CASE d.cost_type WHEN '2' THEN d.cost_money ELSE 0 END) AS travelMoney,
		MAX(CASE d.cost_type WHEN '3' THEN d.cost_money ELSE 0 END) AS overMoney,
		MAX(CASE d.cost_type WHEN '4' THEN d.cost_money ELSE 0 END) AS extraRewardMoney,
		MAX(CASE d.cost_type WHEN '10' THEN d.cost_money ELSE 0 END) AS insuranceMoney,
		MAX(CASE d.cost_type WHEN '16' THEN d.cost_money ELSE 0 END) AS baseMoneyDiff,
		MAX(CASE d.cost_type WHEN '17' THEN d.cost_money ELSE 0 END) AS travelMoneyDiff,
		MAX(CASE d.cost_type WHEN '18' THEN d.cost_money ELSE 0 END) AS overMoneyDiff,
		MAX(CASE d.cost_type WHEN '22' THEN d.cost_money ELSE 0 END) AS baseGroupManageMoney,
		MAX(CASE d.cost_type WHEN '23' THEN d.cost_money ELSE 0 END) AS remoteGroupManageMoney,
		MAX(CASE d.cost_type WHEN '24' THEN d.cost_money ELSE 0 END) AS overGroupManageMoney,
		MAX(CASE d.cost_type WHEN '25' THEN d.cost_money ELSE 0 END) AS financeMoney,
		MAX(CASE d.cost_type WHEN '28' THEN d.cost_money ELSE 0 END) AS guideBaseMoney,
		MAX(CASE d.cost_type WHEN '29' THEN d.cost_money ELSE 0 END) AS guideBaseOverMoney,
		MAX(CASE d.cost_type WHEN '30' THEN d.cost_money ELSE 0 END) AS guideBaseChannelInvoiceFee,
		MAX(CASE d.cost_type WHEN '31' THEN d.cost_money ELSE 0 END) AS guideOverChannelInvoiceFee,
		MAX(CASE d.cost_type WHEN '32' THEN d.cost_money ELSE 0 END) AS ctDeductMoney,
		MAX(CASE d.cost_type WHEN '33' THEN d.cost_money ELSE 0 END) AS teamDeductMoney
 		FROM fm_order_cost_detail d
 		WHERE d.order_id = #{orderId}
 		GROUP BY d.order_id;
	</select>
  
  	<!-- 查询卖家的费用详情 -->
	<select id="querySellerCostMoney" parameterType="map" resultType="map">
		SELECT d.order_id , 
			MAX(CASE d.cost_type WHEN '1' THEN d.cost_money ELSE 0 END) AS baseMoney,
			MAX(CASE d.cost_type WHEN '2' THEN d.cost_money ELSE 0 END) AS travelMoney,
			MAX(CASE d.cost_type WHEN '3' THEN d.cost_money ELSE 0 END) AS overMoney,
			MAX(CASE d.cost_type WHEN '4' THEN d.cost_money ELSE 0 END) AS extraRewardMoney,
			MAX(CASE d.cost_type WHEN '5' THEN d.cost_money ELSE 0 END) AS powerMoney,
			MAX(CASE d.cost_type WHEN '10' THEN d.cost_money ELSE 0 END) AS insuranceMoney,
			MAX(CASE d.cost_type WHEN '22' THEN d.cost_money ELSE 0 END) AS baseGroupManageMoney,
			MAX(CASE d.cost_type WHEN '23' THEN d.cost_money ELSE 0 END) AS remoteGroupManageMoney,
			MAX(CASE d.cost_type WHEN '24' THEN d.cost_money ELSE 0 END) AS overGroupManageMoney,
			MAX(CASE d.cost_type WHEN '25' THEN d.cost_money ELSE 0 END) AS financeMoney
 		FROM fm_order_cost_detail d
 		WHERE d.order_id = #{orderId}
 		GROUP BY d.order_id;
	</select>
	
	<!-- 查询团队的费用详情 -->
	<select id="queryGroupCostMoney" parameterType="map" resultType="map">
		SELECT d.order_id , 
			MAX(CASE d.cost_type WHEN '1' THEN d.cost_money ELSE 0 END) AS baseMoney,
			MAX(CASE d.cost_type WHEN '2' THEN d.cost_money ELSE 0 END) AS travelMoney,
			MAX(CASE d.cost_type WHEN '3' THEN d.cost_money ELSE 0 END) AS overMoney,
			MAX(CASE d.cost_type WHEN '4' THEN d.cost_money ELSE 0 END) AS extraRewardMoney,
			MAX(CASE d.cost_type WHEN '5' THEN d.cost_money ELSE 0 END) AS powerMoney,
			MAX(CASE d.cost_type WHEN '10' THEN d.cost_money ELSE 0 END) AS insuranceMoney,
			MAX(CASE d.cost_type WHEN '25' THEN d.cost_money ELSE 0 END) AS financeMoney
 		FROM fm_order_cost_detail d
 		WHERE d.order_id = #{orderId}
 		GROUP BY d.order_id;
	</select>
	
	<!-- 查询买家的费用详情 -->
	<select id="queryBuyerCostMoney" parameterType="map" resultType="map">
		SELECT d.order_id , 
			MAX(CASE d.cost_type WHEN '1' THEN d.cost_money ELSE 0 END) AS baseMoney,
			MAX(CASE d.cost_type WHEN '2' THEN d.cost_money ELSE 0 END) AS travelMoney,
			MAX(CASE d.cost_type WHEN '3' THEN d.cost_money ELSE 0 END) AS overMoney,
			MAX(CASE d.cost_type WHEN '4' THEN d.cost_money ELSE 0 END) AS extraRewardMoney,
			MAX(CASE d.cost_type WHEN '5' THEN d.cost_money ELSE 0 END) AS powerMoney,
			MAX(CASE d.cost_type WHEN '16' THEN d.cost_money ELSE 0 END) AS baseMoneyDiff,
			MAX(CASE d.cost_type WHEN '17' THEN d.cost_money ELSE 0 END) AS travelMoneyDiff,
			MAX(CASE d.cost_type WHEN '18' THEN d.cost_money ELSE 0 END) AS overMoneyDiff
 		FROM fm_order_cost_detail d
 		WHERE d.order_id = #{orderId}
 		GROUP BY d.order_id;
	</select>
	
	<!-- 订单转派查询订单费用 -->
	<select id="queryTransformCostMoney" parameterType="string" resultType="map">
		SELECT
			MAX(CASE d.cost_type WHEN '11' THEN d.cost_money ELSE 0 END) AS dispatchMoney,
			MAX(CASE d.cost_type WHEN '28' THEN d.cost_money ELSE 0 END) AS guideBaseMoney
		FROM
			fm_order_cost_detail d
 		WHERE d.order_id = #{orderId}
 		GROUP BY d.order_id
	</select>
  
  <select id="queryBaseGroupMoney" resultType="long">
  	SELECT
		COUNT(1)
	FROM
		fm_order_cost_detail d
	WHERE
		d.order_id = #{orderId}
	AND d.cost_type = '22'
  </select>
	
	<insert id="insertBatchNotNull" parameterType="net.chetong.order.model.FmOrderCostDetailVO">
		INSERT INTO fm_order_cost_detail   
			(
               order_id,
               order_cost_id,
               cost_name,
               cost_type,
               cost_money
			)
			VALUES
			<foreach collection="list" separator="," item="item">
	   		(
	   			#{item.orderId},
	   			#{item.orderCostId},
	   			#{item.costName},
	   			#{item.costType},
	   			#{item.costMoney}
			)
			</foreach>
	</insert>
	
	<!-- 删除费用详情根据订单id -->
	<delete id="deleteByOrderId" parameterType="long">
		DELETE FROM fm_order_cost_detail WHERE order_id=#{orderId}
	</delete>
	
	<!-- 清除团队管理费 -->
	<update id="cleanGroupFeeByOrderId" parameterType="long">
		UPDATE fm_order_cost_detail
		SET cost_money = 0,
			ext1 = 0
		WHERE
			order_id = #{orderId}
		AND cost_type IN (22, 23, 24)
	</update>
</mapper>